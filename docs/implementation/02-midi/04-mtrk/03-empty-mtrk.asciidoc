:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: rouge
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= Empty MTrk

We now start implementing the `read_mtrk` function with parameters

* `std::istream& in`, positioned at the beginning of an MTrk chunk;
* `EventReceiver& receiver`

`read_mtrk` should read MTrk event from `in`.
For every event it finds, it should call the corresponding member function, nothing more.
Actually doing something with the event data is left to the `EventReceiver` object (which you'll be implementing later.)
Conceptually, `read_mtrk` could look like shown below:

[source]
----
void midi::read_mtrk(std::istream& in, EventReceiver& receiver)
{
    Read chunk header
    Check that header's id is indeed MTrk

    bool end_of_track_reached = false;

    while ( !end_of_track_reached )
    {
        event = read next event

        if ( event is meta-event )
        {
            data = read meta-event data
            receiver.meta(data)

            if ( event is end-of-track )
            {
                end_of_track_reached = true
            }
        }
        else if ( event is sysex )
        {
            data = read sysex data
            receiver.sysex(data)
        }
        else if ( event is note on )
        {
            data = read note on data
            receiver.note_on(data)
        }
        ...
    }
}
----

Since `read_mtrk` is a rather long function (around 70 lines in my own implementation), we'll build it up gradually.

We begin with a simple implementation of `read_mtrk` that can only process an
empty MTrk chunk, that is, an MTrk with just an end-of-track event.  In byte
form, an empty MTrk looks like this:

----
M T r k                  MTrk chunk identifier
0x00 0x00 0x00 0x04      Length of the chunk
0x00 0xFF 0x2F 0x00      End-of-track event
----

The end-of-track event, as described in the
<<../../../background-information/midi.asciidoc#endoftrack,MIDI background
information>>, consists of the following bytes:

* `0x00`: Delta time since last event. It makes little sense to delay this event in time.
* `0xFF`: Identifier for meta event.
* `0x2F`: End of stream identifier.
* `0x00`: Meta event data length. An end-of-track event carries no extra data, so 0.

This byte stream can also be found in the tests.

Given this input stream, `read_mtrk` is expected to make a single call to `EventReceiver::meta` with

* `dt = 0`
* `type = 0x2F`
* `data = {}` (zero length byte array)
* `data_size = 0`

[NOTE]
====
``EventReceiver``'s `meta` member function expects a `std::unique_ptr<byte[]>`.
Unique pointers can't simply be passed to functions, since that would invoke the copy constructor, and copying unique pointers defeats the purpose of them being *unique*.
Instead, you'll need `std::move(ptr)` to explicitly carry over ownership.

[source,c++]
----
auto p = std::make_unique<byte[]>(5); <1>

assert(p != nullptr);                 <2>
f(std::move(p));                      <3>
assert(p == nullptr);                 <4>
----
<1> Creates a unique pointer to a byte array of length 5.
<2> At this point, `p` cannot be `nullptr`.
<3> We need to use `std::move` to carry over ownership.
<4> We transferred the pointer to `f`, so our `p` is now `nullptr`.
====

[NOTE,caption={task-caption}]
====
Implement `read_mtrk`. For now, it only needs to be able to deal with an empty MTrk.
====
